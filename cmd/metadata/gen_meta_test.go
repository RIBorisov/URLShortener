package main

import (
	"os"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

func TestGenMetaWithEnvs(t *testing.T) {
	// Удаляем файл, если существует
	const filename = "metadata.go"
	if _, err := os.Stat(filename); err == nil {
		assert.NoError(t, os.Remove(filename))
	}

	t.Setenv("BUILD_VERSION", "1.0.0")
	t.Setenv("BUILD_COMMIT", "12345678")
	main()

	_, err := os.ReadFile(filename)
	assert.NoError(t, err)

	expectedDate := time.Now().Format(time.DateTime)
	expectedContent := `// Code generated by go generate; DO NOT EDIT.
package main
var (
	buildVersion = "1.0.0"
	buildDate    = "` + expectedDate + `"
	buildCommit  = "12345678"
)` + "\n"

	assert.Contains(t, expectedContent, "buildVersion = \"1.0.0\"")
	assert.Contains(t, expectedContent, "buildDate    = \""+expectedDate)
	assert.Contains(t, expectedContent, "buildCommit  = \"12345678\"")

	defer func() {
		assert.NoError(t, os.Remove(filename))
	}()
}

func TestWithoutEnvs(t *testing.T) {
	const filename = "metadata.go"
	if _, err := os.Stat(filename); err == nil {
		assert.NoError(t, os.Remove(filename))
	}

	t.Setenv("BUILD_VERSION", "")
	t.Setenv("BUILD_COMMIT", "")

	main()

	content, err := os.ReadFile(filename)
	defer func() {
		assert.NoError(t, os.Remove(filename))
	}()
	assert.NoError(t, err)

	expectedDate := time.Now().Format(time.DateTime)
	expectedContent := `// Code generated by go generate; DO NOT EDIT.
package main
var (
	buildVersion = "N/A"
	buildDate    = "` + expectedDate + `"
	buildCommit  = "N/A"
)` + "\n"

	assert.Contains(t, string(content), "buildVersion = \"N/A\"")
	assert.Contains(t, expectedContent, "buildDate    = \""+expectedDate)
	assert.Contains(t, string(content), "buildCommit  = \"N/A\"")
}
